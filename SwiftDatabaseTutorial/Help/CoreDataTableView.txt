CORE DATA TABLE VIEWS
If you weren’t using Core Data, you might populate a table view using an array as the data source. A key problem with this approach, which you may have experienced firsthand, is that performance can suffer when the array is too big as it consumes too much memory. Up until now, you’ve performed Core Data fetches using an NSFetchRequest, which returns an array when executed. Although you could use this array directly to populate a table view, there is a better way. To populate a table view, you still fetch with an NSFetchRequest; however, this time you configure additional options such as the fetch batch size to stagger the fetch. This small option can have a huge impact on the memory footprint and consequently improve overall performance. The batch size you set should be a bit larger than the number of rows visible on the screen at any one time.

The best way to efficiently manage fetched data between Core Data and a table view is with an NSFetchedResultsController. If you were to otherwise use the array returned by a fetch request directly without a fetched results controller, there’s a chance that when the underlying data changes, the objects in the array could become invalid. This could lead to a crash.
